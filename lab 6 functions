// 6-я лаба 2-й семестр.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
//

#include <iostream>
#include <conio.h>
#include <math.h>
using namespace std;

double input(const char* msg) {
    double toReturn = 0;
    cout << msg << " ";
    while (!(cin >> toReturn) || cin.get() != '\n') {
        cin.clear();
        while (cin.get() != '\n');
        cout << "\nНеправильный ввод!\n Попробуйте еще раз: ";
    }
    return toReturn;
}

double F(double x) {
    return 4*x - 7 * sin(x);
}
double Method_interval_division(double a, double b, double e, int& iterations) {
    double res, x0 = a, x1 = b, x2;
    double y0, y1, y2;
    y0 = F(x0);
    y1 = F(x1);
    iterations = 0;
    while (true) {
        iterations++;
        x2 = (x0 + x1) / 2;
        y2 = F(x2);
        if (y0 * y2 > 0) {
            x0 = x2;
            y0 = y2;
        }
        else {
            x1 = x2;
            y1 = y2;
        }
        if (x1 - x0 <= e) {
            res = (x0 + x1) / 2;
            return res;
        }
    }
}
double dx(double x, double eps) {
    return (F(x + eps) - F(x - eps)) / (2 * eps);
}
double Method_Newton(double x0, double eps, int& c) {
    double x1;
    c = 0;
    while (1) {
        c++;
        x1 = x0 - F(x0) / dx(x0, eps);
        if (fabs(x1 - x0) > eps) {
            x0 = x1;
        }
        else return x1;
    }
}
void Start(double &a,double &b) {
    double e, res, step;
    int iter, n = 0;
    a = input("a = ");
    b = input("b = ");
    e = input("e = ");
    while (e > 0.001 || e <= 0) {
        if (e > 0.001) { cout << "Слишком большая точность! Возможны ошибки.\n Попробуйте еще раз!" << endl; }
        else { cout << "e должено быть больше нуля!\n Попробуйте еще раз!" << endl; }
        e = input("e = ");
    }
    step = input("step = ");
    while (step > 0.01 || step <= 0) {
        if (step > 0.01) { cout << "Слишком большой шаг! Возможны ошибки.\n Попробуйте еще раз!" << endl; }
        else { cout << "Шаг должен быть больше нуля!\n Попробуйте еще раз!" << endl; }
        step = input("step = ");
    }

    if (a > b) {
        n = b;
        b = a;
        a = n;
        n = 0;
    }
    cout << "\nФункция: F(x) = 4*x - 7*sin(x).\n" << endl;

    cout << "Метод деления отрезка пополам:" << endl;
    for (double i = a; i < b; i += step) {
        res = Method_interval_division(i, i + step, e, iter);
        if (F(i) * F(i + step) < 0 && abs(F(res)) < abs(F(res) - F(res + e)) && res >= a && res <= b) {
            n++;
            cout << "Корень " << n << " : " << res << " | f(x)=" << F(res) << " | " << iter << " итераций\n";
        }
    }
    if (n == 0) { cout << "На данном промежутке нет корней!" << endl; }
    else {
        n = 0;
        cout << endl;
        cout << "Метод Ньютона" << endl;
        for (double x = a; x <= b; x += step) {
            if (F(x) * F(x + step) < 0) {
                n++;
                res = Method_Newton(x, e, iter);
                cout << "Корень " << n << " : " << res << " | f(x)=" << F(res) << " | " << iter << " итераций\n";
            }
        }
    }
}
void View(int a, int b) {
    double koef_width = ((b - a) / 0.1) / 80 * 0.1;
    double f_min = 0, f_max = 0;
    for (double x = a; x < b; x += 0.01) {
        if (f_max < F(x)) {
            f_max = F(x);
        }
        if (f_min > F(x)) {
            f_min = F(x);
        }
    }
    for (f_max; f_max > f_min; f_max -= 0.7) {
        for (double i = a; i < b; i += koef_width) {
            if ((F(i) + (koef_width + 0.35)) > f_max && (F(i) - (koef_width + 0.35)) < f_max) {
                cout << "*";
            }
            else {
                cout << " ";
            }
        }
        cout << endl;
    }
}
int main(){
    setlocale(LC_ALL, "ru");
    double a = 0, b = 0;
    Start(a, b);
    while (1) {
        cout << "\nЧто вы хотите сделать?\n1-Ввести новые значения.\n2-Вывести график.\nelse-Завершить работу.\n" << endl;;
        switch (_getch()) {
        case '1':
            Start(a, b);
            break;
        case '2':
            cout << "\n\n\n";
            View(a, b);
            break;
        default:
            return 0;
        }
    }
}
